version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: videoflix_database
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: videoflix_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  web:
    build:
      context: .
      dockerfile: backend.Dockerfile
    env_file: .env
    container_name: videoflix_backend
    volumes:
      - .:/app
      - videoflix_media:/app/media
      - videoflix_static:/app/static
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Redis Commander (optional - Redis monitoring)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: videoflix_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped

  # pgAdmin (optional - PostgreSQL monitoring)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: videoflix_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@videoflix.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "8082:80"
    depends_on:
      - db
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  videoflix_media:
  videoflix_static:

networks:
  default:
    name: videoflix_network
